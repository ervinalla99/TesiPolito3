{
  "version": 3,
  "sources": ["../../dxf-writer/src/Handle.js", "../../dxf-writer/src/DatabaseObject.js", "../../dxf-writer/src/LineType.js", "../../dxf-writer/src/Layer.js", "../../dxf-writer/src/Table.js", "../../dxf-writer/src/DimStyleTable.js", "../../dxf-writer/src/TextStyle.js", "../../dxf-writer/src/Viewport.js", "../../dxf-writer/src/AppId.js", "../../dxf-writer/src/Block.js", "../../dxf-writer/src/BlockRecord.js", "../../dxf-writer/src/Dictionary.js", "../../dxf-writer/src/Line.js", "../../dxf-writer/src/Line3d.js", "../../dxf-writer/src/Arc.js", "../../dxf-writer/src/Circle.js", "../../dxf-writer/src/Cylinder.js", "../../dxf-writer/src/Text.js", "../../dxf-writer/src/Polyline.js", "../../dxf-writer/src/Vertex.js", "../../dxf-writer/src/Polyline3d.js", "../../dxf-writer/src/Face.js", "../../dxf-writer/src/Point.js", "../../dxf-writer/src/Spline.js", "../../dxf-writer/src/Ellipse.js", "../../dxf-writer/src/TagsManager.js", "../../dxf-writer/src/Drawing.js", "../../dxf-writer/index.js"],
  "sourcesContent": ["class Handle {\n    static seed = 0;\n\n    static next() {\n        return (++Handle.seed).toString(16).toUpperCase();\n    }\n\n    static peek() {\n        return (Handle.seed + 1).toString(16).toUpperCase();\n    }\n}\n\nmodule.exports = Handle;\n", "const Handle = require(\"./Handle\");\n\nclass DatabaseObject {\n    constructor(subclass = null) {\n        this.handle = Handle.next();\n        this.ownerObjectHandle = \"0\";\n        this.subclassMarkers = [];\n        if (subclass) {\n            if (Array.isArray(subclass)) {\n                this.subclassMarkers.push(...subclass);\n            } else {\n                this.subclassMarkers.push(subclass);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param {TagsManager} manager\n     */\n    tags(manager) {\n        manager.push(5, this.handle);\n        manager.push(330, this.ownerObjectHandle);\n        for (const s of this.subclassMarkers) {\n            manager.push(100, s);\n        }\n    }\n}\n\nmodule.exports = DatabaseObject;\n", "const DatabaseObject = require(\"./DatabaseObject\");\n\nclass LineType extends DatabaseObject {\n    /**\n     * @param {string} name\n     * @param {string} description\n     * @param {array} elements - if elem > 0 it is a line, if elem < 0 it is gap, if elem == 0.0 it is a\n     */\n    constructor(name, description, elements) {\n        super([\"AcDbSymbolTableRecord\", \"AcDbLinetypeTableRecord\"]);\n        this.name = name;\n        this.description = description;\n        this.elements = elements;\n    }\n\n    tags(manager) {\n        // https://www.autodesk.com/techpubs/autocad/acadr14/dxf/ltype_al_u05_c.htm\n        manager.push(0, \"LTYPE\");\n        super.tags(manager);\n        manager.push(2, this.name);\n        manager.push(3, this.description);\n        manager.push(70, 0);\n        manager.push(72, 65);\n        manager.push(73, this.elements.length);\n        manager.push(40, this.getElementsSum());\n\n        this.elements.forEach((element) => {\n            manager.push(49, element);\n            manager.push(74, 0);\n        });\n    }\n\n    getElementsSum() {\n        return this.elements.reduce((sum, element) => {\n            return sum + Math.abs(element);\n        }, 0);\n    }\n}\n\nmodule.exports = LineType;\n", "const DatabaseObject = require(\"./DatabaseObject\");\n\nclass Layer extends DatabaseObject {\n    constructor(name, colorNumber, lineTypeName = null) {\n        super([\"AcDbSymbolTableRecord\", \"AcDbLayerTableRecord\"]);\n        this.name = name;\n        this.colorNumber = colorNumber;\n        this.lineTypeName = lineTypeName;\n        this.shapes = [];\n        this.trueColor = -1;\n    }\n\n    tags(manager) {\n        manager.push(0, \"LAYER\");\n        super.tags(manager);\n        manager.push(2, this.name);\n        if (this.trueColor !== -1) manager.push(420, this.trueColor);\n        else manager.push(62, this.colorNumber);\n\n        manager.push(70, 0);\n        if (this.lineTypeName) manager.push(6, this.lineTypeName);\n\n        /* Hard-pointer handle to PlotStyleName object; seems mandatory, but any value seems OK,\n         * including 0.\n         */\n        manager.push(390, 1);\n    }\n\n    setTrueColor(color) {\n        this.trueColor = color;\n    }\n\n    addShape(shape) {\n        this.shapes.push(shape);\n        shape.layer = this;\n    }\n\n    getShapes() {\n        return this.shapes;\n    }\n\n    shapesTags(space, manager) {\n        for (const shape of this.shapes) {\n            shape.ownerObjectHandle = space.handle;\n            shape.tags(manager);\n        }\n    }\n}\n\nmodule.exports = Layer;\n", "const DatabaseObject = require(\"./DatabaseObject\");\n\nclass Table extends DatabaseObject {\n    constructor(name) {\n        super(\"AcDbSymbolTable\");\n        this.name = name;\n        this.elements = [];\n    }\n\n    add(element) {\n        element.ownerObjectHandle = this.handle;\n        this.elements.push(element);\n    }\n\n    tags(manager) {\n        manager.push(0, \"TABLE\");\n        manager.push(2, this.name);\n        super.tags(manager);\n        manager.push(70, this.elements.length);\n\n        this.elements.forEach((element) => {\n            element.tags(manager);\n        });\n\n        manager.push(0, \"ENDTAB\");\n    }\n}\n\nmodule.exports = Table;\n", "const DatabaseObject = require(\"./DatabaseObject\");\nconst Table = require(\"./Table\");\n\nclass DimStyleTable extends Table {\n    constructor(name) {\n        super(name);\n        this.subclassMarkers.push(\"AcDbDimStyleTable\");\n    }\n\n    tags(manager) {\n        manager.push(0, \"TABLE\");\n        manager.push(2, this.name);\n        DatabaseObject.prototype.tags.call(this, manager);\n        manager.push(70, this.elements.length);\n        /* DIMTOL */\n        manager.push(71, 1);\n\n        for (const e of this.elements) {\n            e.tags(manager);\n        }\n\n        manager.push(0, \"ENDTAB\");\n    }\n}\n\nmodule.exports = DimStyleTable;\n", "const DatabaseObject = require(\"./DatabaseObject\");\n\nclass TextStyle extends DatabaseObject {\n    fontFileName = 'txt';\n    constructor(name) {\n        super([\"AcDbSymbolTableRecord\", \"AcDbTextStyleTableRecord\"]);\n        this.name = name;\n    }\n\n    tags(manager) {\n        manager.push(0, \"STYLE\");\n        super.tags(manager);\n        manager.push(2, this.name);\n        /* No flags set */\n        manager.push(70, 0);\n        manager.push(40, 0);\n        manager.push(41, 1);\n        manager.push(50, 0);\n        manager.push(71, 0);\n        manager.push(42, 1);\n        manager.push(3, this.fontFileName);\n        manager.push(4, \"\");\n    }\n}\n\nmodule.exports = TextStyle;\n", "const DatabaseObject = require(\"./DatabaseObject\");\n\nclass Viewport extends DatabaseObject {\n    constructor(name, height) {\n        super([\"AcDbSymbolTableRecord\", \"AcDbViewportTableRecord\"]);\n        this.name = name;\n        this.height = height;\n    }\n\n    tags(manager) {\n        manager.push(0, \"VPORT\");\n        super.tags(manager);\n        manager.push(2, this.name);\n        manager.push(40, this.height);\n        /* No flags set */\n        manager.push(70, 0);\n    }\n}\n\nmodule.exports = Viewport;\n", "const DatabaseObject = require(\"./DatabaseObject\");\n\nclass AppId extends DatabaseObject {\n    constructor(name) {\n        super([\"AcDbSymbolTableRecord\", \"AcDbRegAppTableRecord\"]);\n        this.name = name;\n    }\n\n    tags(manager) {\n        manager.push(0, \"APPID\");\n        super.tags(manager);\n        manager.push(2, this.name);\n        /* No flags set */\n        manager.push(70, 0);\n    }\n}\n\nmodule.exports = AppId;\n", "const DatabaseObject = require(\"./DatabaseObject\");\n\nclass Block extends DatabaseObject {\n    constructor(name) {\n        super([\"AcDbEntity\", \"AcDbBlockBegin\"]);\n        this.name = name;\n        this.end = new DatabaseObject([\"AcDbEntity\", \"AcDbBlockEnd\"]);\n        this.recordHandle = null;\n    }\n\n    tags(manager) {\n        manager.push(0, \"BLOCK\");\n        super.tags(manager);\n        manager.push(2, this.name);\n        /* No flags set */\n        manager.push(70, 0);\n        /* Block top left corner */\n        manager.point(0, 0);\n        manager.push(3, this.name);\n        /* xref path name - nothing */\n        manager.push(1, \"\");\n\n        //XXX dump content here\n\n        manager.push(0, \"ENDBLK\");\n        this.end.tags(manager);\n    }\n}\n\nmodule.exports = Block;\n", "const DatabaseObject = require(\"./DatabaseObject\");\n\nclass BlockRecord extends DatabaseObject {\n    constructor(name) {\n        super([\"AcDbSymbolTableRecord\", \"AcDbBlockTableRecord\"]);\n        this.name = name;\n    }\n\n    tags(manager) {\n        manager.push(0, \"BLOCK_RECORD\");\n        super.tags(manager);\n        manager.push(2, this.name);\n        /* No flags set */\n        manager.push(70, 0);\n        /* Block explodability */\n        manager.push(280, 0);\n        /* Block scalability */\n        manager.push(281, 1);\n    }\n}\n\nmodule.exports = BlockRecord;\n", "const DatabaseObject = require(\"./DatabaseObject\");\n\nclass Dictionary extends DatabaseObject {\n    constructor() {\n        super(\"AcDbDictionary\");\n        this.children = {};\n    }\n\n    /**\n     *\n     * @param {*} name\n     * @param {DatabaseObject} dictionary\n     */\n    addChildDictionary(name, dictionary) {\n        dictionary.ownerObjectHandle = this.handle;\n        this.children[name] = dictionary;\n    }\n\n    tags(manager) {\n        manager.push(0, \"DICTIONARY\");\n        super.tags(manager);\n        /* Duplicate record cloning flag - keep existing */\n        manager.push(281, 1);\n\n        const entries = Object.entries(this.children);\n        for (const entry of entries) {\n            const [name, dic] = entry;\n            manager.push(3, name);\n            manager.push(350, dic.handle);\n        }\n\n        const children = Object.values(this.children);\n        for (const c of children) {\n            c.tags(manager);\n        }\n    }\n}\n\nmodule.exports = Dictionary;\n", "const DatabaseObject = require(\"./DatabaseObject\");\n\nclass Line extends DatabaseObject {\n    constructor(x1, y1, x2, y2) {\n        super([\"AcDbEntity\", \"AcDbLine\"]);\n        this.x1 = x1;\n        this.y1 = y1;\n        this.x2 = x2;\n        this.y2 = y2;\n    }\n\n    tags(manager) {\n        //https://www.autodesk.com/techpubs/autocad/acadr14/dxf/line_al_u05_c.htm\n        manager.push(0, \"LINE\");\n        super.tags(manager);\n        manager.push(8, this.layer.name);\n        manager.point(this.x1, this.y1);\n\n        manager.push(11, this.x2);\n        manager.push(21, this.y2);\n        manager.push(31, 0);\n    }\n}\n\nmodule.exports = Line;\n", "const DatabaseObject = require(\"./DatabaseObject\");\n\nclass Line3d extends DatabaseObject {\n    constructor(x1, y1, z1, x2, y2, z2) {\n        super([\"AcDbEntity\", \"AcDbLine\"]);\n        this.x1 = x1;\n        this.y1 = y1;\n        this.z1 = z1;\n        this.x2 = x2;\n        this.y2 = y2;\n        this.z2 = z2;\n    }\n\n    tags(manager) {\n        //https://www.autodesk.com/techpubs/autocad/acadr14/dxf/line_al_u05_c.htm\n        manager.push(0, \"LINE\");\n        super.tags(manager);\n        manager.push(8, this.layer.name);\n        manager.point(this.x1, this.y1, this.z1);\n\n        manager.push(11, this.x2);\n        manager.push(21, this.y2);\n        manager.push(31, this.z2);\n    }\n}\n\nmodule.exports = Line3d;\n", "const DatabaseObject = require(\"./DatabaseObject\");\n\nclass Arc extends DatabaseObject {\n    /**\n     * @param {number} x - Center x\n     * @param {number} y - Center y\n     * @param {number} r - radius\n     * @param {number} startAngle - degree\n     * @param {number} endAngle - degree\n     */\n    constructor(x, y, r, startAngle, endAngle) {\n        super([\"AcDbEntity\", \"AcDbCircle\"]);\n        this.x = x;\n        this.y = y;\n        this.r = r;\n        this.startAngle = startAngle;\n        this.endAngle = endAngle;\n    }\n\n    tags(manager) {\n        //https://www.autodesk.com/techpubs/autocad/acadr14/dxf/line_al_u05_c.htm\n        manager.push(0, \"ARC\");\n        super.tags(manager);\n        manager.push(8, this.layer.name);\n        manager.point(this.x, this.y);\n        manager.push(40, this.r);\n        manager.push(100, \"AcDbArc\");\n        manager.push(50, this.startAngle);\n        manager.push(51, this.endAngle);\n    }\n}\n\nmodule.exports = Arc;\n", "const DatabaseObject = require(\"./DatabaseObject\");\n\nclass Circle extends DatabaseObject {\n    /**\n     * @param {number} x - Center x\n     * @param {number} y - Center y\n     * @param {number} r - radius\n     */\n    constructor(x, y, r) {\n        super([\"AcDbEntity\", \"AcDbCircle\"]);\n        this.x = x;\n        this.y = y;\n        this.r = r;\n    }\n\n    tags(manager) {\n        //https://www.autodesk.com/techpubs/autocad/acadr14/dxf/circle_al_u05_c.htm\n        manager.push(0, \"CIRCLE\");\n        super.tags(manager);\n        manager.push(8, this.layer.name);\n        manager.point(this.x, this.y);\n        manager.push(40, this.r);\n    }\n}\n\nmodule.exports = Circle;\n", "const DatabaseObject = require(\"./DatabaseObject\");\n\nclass Cylinder extends DatabaseObject {\n    /**\n     * @param {number} x - Center x\n     * @param {number} y - Center y\n     * @param {number} z - Center z\n     * @param {number} r - radius\n     * @param {number} thickness - thickness\n     * @param {number} extrusionDirectionX - Extrusion Direction x\n     * @param {number} extrusionDirectionY - Extrusion Direction y\n     * @param {number} extrusionDirectionZ - Extrusion Direction z\n     */\n    constructor(\n        x,\n        y,\n        z,\n        r,\n        thickness,\n        extrusionDirectionX,\n        extrusionDirectionY,\n        extrusionDirectionZ\n    ) {\n        super([\"AcDbEntity\", \"AcDbCircle\"]);\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.r = r;\n        this.thickness = thickness;\n        (this.extrusionDirectionX = extrusionDirectionX),\n            (this.extrusionDirectionY = extrusionDirectionY),\n            (this.extrusionDirectionZ = extrusionDirectionZ);\n    }\n\n    tags(manager) {\n        manager.push(0, \"CIRCLE\");\n        super.tags(manager);\n        manager.push(8, this.layer.name);\n        manager.point(this.x, this.y, this.z);\n        manager.push(40, this.r);\n        manager.push(39, this.thickness);\n        manager.push(210, this.extrusionDirectionX);\n        manager.push(220, this.extrusionDirectionY);\n        manager.push(230, this.extrusionDirectionZ);\n    }\n}\n\nmodule.exports = Cylinder;\n", "const DatabaseObject = require(\"./DatabaseObject\");\n\nconst H_ALIGN_CODES = [\"left\", \"center\", \"right\"];\nconst V_ALIGN_CODES = [\"baseline\", \"bottom\", \"middle\", \"top\"];\n\nclass Text extends DatabaseObject {\n    /**\n     * @param {number} x - x\n     * @param {number} y - y\n     * @param {number} height - Text height\n     * @param {number} rotation - Text rotation\n     * @param {string} value - the string itself\n     * @param {string} [horizontalAlignment=\"left\"] left | center | right\n     * @param {string} [verticalAlignment=\"baseline\"] baseline | bottom | middle | top\n     */\n    constructor(\n        x,\n        y,\n        height,\n        rotation,\n        value,\n        horizontalAlignment = \"left\",\n        verticalAlignment = \"baseline\"\n    ) {\n        super([\"AcDbEntity\", \"AcDbText\"]);\n        this.x = x;\n        this.y = y;\n        this.height = height;\n        this.rotation = rotation;\n        this.value = value;\n        this.hAlign = horizontalAlignment;\n        this.vAlign = verticalAlignment;\n    }\n\n    tags(manager) {\n        //https://www.autodesk.com/techpubs/autocad/acadr14/dxf/text_al_u05_c.htm\n        manager.push(0, \"TEXT\");\n        super.tags(manager);\n        manager.push(8, this.layer.name);\n        manager.point(this.x, this.y);\n        manager.push(40, this.height);\n        manager.push(1, this.value);\n        manager.push(50, this.rotation);\n\n        if (\n            H_ALIGN_CODES.includes(this.hAlign, 1) ||\n            V_ALIGN_CODES.includes(this.vAlign, 1)\n        ) {\n            manager.push(72, Math.max(H_ALIGN_CODES.indexOf(this.hAlign), 0));\n\n            manager.push(11, this.x);\n            manager.push(21, this.y);\n            manager.push(31, 0);\n\n            /* AutoCAD needs this one more time, yes, exactly here. */\n            manager.push(100, \"AcDbText\");\n            manager.push(73, Math.max(V_ALIGN_CODES.indexOf(this.vAlign), 0));\n        } else {\n            /* AutoCAD needs this one more time. */\n            manager.push(100, \"AcDbText\");\n        }\n    }\n}\n\nmodule.exports = Text;\n", "const DatabaseObject = require(\"./DatabaseObject\");\n\nclass Polyline extends DatabaseObject {\n    /**\n     * @param {array} points - Array of points like [ [x1, y1], [x2, y2, bulge]... ]\n     * @param {boolean} closed\n     * @param {number} startWidth\n     * @param {number} endWidth\n     */\n    constructor(points, closed = false, startWidth = 0, endWidth = 0) {\n        super([\"AcDbEntity\", \"AcDbPolyline\"]);\n        this.points = points;\n        this.closed = closed;\n        this.startWidth = startWidth;\n        this.endWidth = endWidth;\n    }\n\n    tags(manager) {\n        manager.push(0, \"LWPOLYLINE\");\n        super.tags(manager);\n        manager.push(8, this.layer.name);\n        manager.push(6, \"ByLayer\");\n        manager.push(62, 256);\n        manager.push(370, -1);\n        manager.push(90, this.points.length);\n        manager.push(70, this.closed ? 1 : 0);\n\n        this.points.forEach((point) => {\n            const [x, y, z] = point;\n            manager.push(10, x);\n            manager.push(20, y);\n            if (this.startWidth !== 0 || this.endWidth !== 0) {\n                manager.push(40, this.startWidth);\n                manager.push(41, this.endWidth);\n            }\n            if (z !== undefined) manager.push(42, z);\n        });\n    }\n}\n\nmodule.exports = Polyline;\n", "const DatabaseObject = require(\"./DatabaseObject\");\n\nclass Vertex extends DatabaseObject {\n    /**\n     *\n     * @param {number} x The X coordinate\n     * @param {number} y The Y coordinate\n     * @param {number} z The Z coordinate\n     */\n    constructor(x, y, z) {\n        super([\"AcDbEntity\", \"AcDbVertex\", \"AcDb3dPolylineVertex\"]);\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    tags(manager) {\n        manager.push(0, \"VERTEX\");\n        super.tags(manager);\n        manager.push(8, this.layer.name);\n        manager.point(this.x, this.y, this.z);\n        manager.push(70, 32);\n    }\n}\n\nmodule.exports = Vertex;\n", "const DatabaseObject = require(\"./DatabaseObject\");\nconst Handle = require(\"./Handle\");\nconst Vertex = require(\"./Vertex\");\n\nclass Polyline3d extends DatabaseObject {\n    /**\n     * @param {[number, number, number][]} points - Array of points like [ [x1, y1, z1], [x2, y2, z2]... ]\n     */\n    constructor(points) {\n        super([\"AcDbEntity\", \"AcDb3dPolyline\"]);\n        this.verticies = points.map((point) => {\n            const [x, y, z] = point;\n            const vertex = new Vertex(x, y, z);\n            vertex.ownerObjectHandle = this.handle;\n            return vertex;\n        });\n        this.seqendHandle = Handle.next();\n    }\n\n    tags(manager) {\n        manager.push(0, \"POLYLINE\");\n        super.tags(manager);\n        manager.push(8, this.layer.name);\n        manager.push(66, 1);\n        manager.push(70, 0);\n        manager.point(0, 0);\n\n        this.verticies.forEach((vertex) => {\n            vertex.layer = this.layer;\n            vertex.tags(manager);\n        });\n\n        manager.push(0, \"SEQEND\");\n        manager.push(5, this.seqendHandle);\n        manager.push(100, \"AcDbEntity\");\n        manager.push(8, this.layer.name);\n    }\n}\n\nmodule.exports = Polyline3d;\n", "const DatabaseObject = require(\"./DatabaseObject\");\n\nclass Face extends DatabaseObject {\n    constructor(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {\n        super([\"AcDbEntity\", \"AcDbFace\"]);\n        this.x1 = x1;\n        this.y1 = y1;\n        this.z1 = z1;\n        this.x2 = x2;\n        this.y2 = y2;\n        this.z2 = z2;\n        this.x3 = x3;\n        this.y3 = y3;\n        this.z3 = z3;\n        this.x4 = x4;\n        this.y4 = y4;\n        this.z4 = z4;\n    }\n\n    tags(manager) {\n        //https://www.autodesk.com/techpubs/autocad/acadr14/dxf/3dface_al_u05_c.htm\n        manager.push(0, \"3DFACE\");\n        super.tags(manager);\n        manager.push(8, this.layer.name);\n        manager.point(this.x1, this.y1, this.z1);\n\n        manager.push(11, this.x2);\n        manager.push(21, this.y2);\n        manager.push(31, this.z2);\n\n        manager.push(12, this.x3);\n        manager.push(22, this.y3);\n        manager.push(32, this.z3);\n\n        manager.push(13, this.x4);\n        manager.push(23, this.y4);\n        manager.push(33, this.z4);\n    }\n}\n\nmodule.exports = Face;\n", "const DatabaseObject = require(\"./DatabaseObject\");\n\nclass Point extends DatabaseObject {\n    constructor(x, y) {\n        super([\"AcDbEntity\", \"AcDbPoint\"]);\n        this.x = x;\n        this.y = y;\n    }\n\n    tags(manager) {\n        //https://www.autodesk.com/techpubs/autocad/acadr14/dxf/point_al_u05_c.htm\n        manager.push(0, \"POINT\");\n        super.tags(manager);\n        manager.push(8, this.layer.name);\n        manager.point(this.x, this.y);\n    }\n}\n\nmodule.exports = Point;\n", "const DatabaseObject = require(\"./DatabaseObject\");\n\nclass Spline extends DatabaseObject {\n    /**\n     * Creates a spline. See https://www.autodesk.com/techpubs/autocad/acad2000/dxf/spline_dxf_06.htm\n     * @param {[Array]} controlPoints - Array of control points like [ [x1, y1], [x2, y2]... ]\n     * @param {number} degree - Degree of spline: 2 for quadratic, 3 for cubic. Default is 3\n     * @param {[number]} knots - Knot vector array. If null, will use a uniform knot vector. Default is null\n     * @param {[number]} weights - Control point weights. If provided, must be one weight for each control point. Default is null\n     * @param {[Array]} fitPoints - Array of fit points like [ [x1, y1], [x2, y2]... ]\n     */\n    constructor(\n        controlPoints,\n        degree = 3,\n        knots = null,\n        weights = null,\n        fitPoints = []\n    ) {\n        super([\"AcDbEntity\", \"AcDbSpline\"]);\n        if (controlPoints.length < degree + 1) {\n            throw new Error(\n                `For degree ${degree} spline, expected at least ${\n                    degree + 1\n                } control points, but received only ${controlPoints.length}`\n            );\n        }\n\n        if (knots == null) {\n            // Examples:\n            // degree 2, 3 pts:  0 0 0 1 1 1\n            // degree 2, 4 pts:  0 0 0 1 2 2 2\n            // degree 2, 5 pts:  0 0 0 1 2 3 3 3\n            // degree 3, 4 pts:  0 0 0 0 1 1 1 1\n            // degree 3, 5 pts:  0 0 0 0 1 2 2 2 2\n\n            knots = [];\n            for (let i = 0; i < degree + 1; i++) {\n                knots.push(0);\n            }\n            for (let i = 1; i < controlPoints.length - degree; i++) {\n                knots.push(i);\n            }\n            for (let i = 0; i < degree + 1; i++) {\n                knots.push(controlPoints.length - degree);\n            }\n        }\n\n        if (knots.length !== controlPoints.length + degree + 1) {\n            throw new Error(\n                `Invalid knot vector length. Expected ${\n                    controlPoints.length + degree + 1\n                } but received ${knots.length}.`\n            );\n        }\n\n        this.controlPoints = controlPoints;\n        this.knots = knots;\n        this.fitPoints = fitPoints;\n        this.degree = degree;\n        this.weights = weights;\n\n        const closed = 0;\n        const periodic = 0;\n        const rational = this.weights ? 1 : 0;\n        const planar = 1;\n        const linear = 0;\n\n        this.type =\n            closed * 1 + periodic * 2 + rational * 4 + planar * 8 + linear * 16;\n\n        // Not certain where the values of these flags came from so I'm going to leave them commented for now\n        // const closed = 0\n        // const periodic = 0\n        // const rational = 1\n        // const planar = 1\n        // const linear = 0\n        // const splineType = 1024 * closed + 128 * periodic + 8 * rational + 4 * planar + 2 * linear\n    }\n\n    tags(manager) {\n        // https://www.autodesk.com/techpubs/autocad/acad2000/dxf/spline_dxf_06.htm\n        manager.push(0, \"SPLINE\");\n        super.tags(manager);\n        manager.push(8, this.layer.name);\n\n        manager.push(210, 0.0);\n        manager.push(220, 0.0);\n        manager.push(230, 1.0);\n\n        manager.push(70, this.type);\n        manager.push(71, this.degree);\n        manager.push(72, this.knots.length);\n        manager.push(73, this.controlPoints.length);\n        manager.push(74, this.fitPoints.length);\n\n        manager.push(42, 1e-7);\n        manager.push(43, 1e-7);\n        manager.push(44, 1e-10);\n\n        this.knots.forEach((knot) => {\n            manager.push(40, knot);\n        });\n\n        if (this.weights) {\n            this.weights.forEach((weight) => {\n                manager.push(41, weight);\n            });\n        }\n\n        this.controlPoints.forEach((point) => {\n            manager.point(point[0], point[1]);\n        });\n    }\n}\n\nmodule.exports = Spline;\n", "const DatabaseObject = require(\"./DatabaseObject\");\n\nclass Ellipse extends DatabaseObject {\n    /**\n     * Creates an ellipse.\n     * @param {number} x - Center x\n     * @param {number} y - Center y\n     * @param {number} majorAxisX - Endpoint x of major axis, relative to center\n     * @param {number} majorAxisY - Endpoint y of major axis, relative to center\n     * @param {number} axisRatio - Ratio of minor axis to major axis\n     * @param {number} startAngle - Start angle\n     * @param {number} endAngle - End angle\n     */\n    constructor(x, y, majorAxisX, majorAxisY, axisRatio, startAngle, endAngle) {\n        super([\"AcDbEntity\", \"AcDbEllipse\"]);\n        this.x = x;\n        this.y = y;\n        this.majorAxisX = majorAxisX;\n        this.majorAxisY = majorAxisY;\n        this.axisRatio = axisRatio;\n        this.startAngle = startAngle;\n        this.endAngle = endAngle;\n    }\n\n    tags(manager) {\n        // https://www.autodesk.com/techpubs/autocad/acadr14/dxf/ellipse_al_u05_c.htm\n        manager.push(0, \"ELLIPSE\");\n        super.tags(manager);\n        manager.push(8, this.layer.name);\n        manager.point(this.x, this.y);\n        manager.push(11, this.majorAxisX);\n        manager.push(21, this.majorAxisY);\n        manager.push(31, 0);\n\n        manager.push(40, this.axisRatio);\n        manager.push(41, this.startAngle);\n        manager.push(42, this.endAngle);\n    }\n}\n\nmodule.exports = Ellipse;\n", "class TagsManager {\n    constructor() {\n        this.lines = [];\n    }\n\n    /**\n     *\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     */\n    point(x, y, z = 0) {\n        this.push(10, x);\n        this.push(20, y);\n        this.push(30, z);\n    }\n\n    /**\n     *\n     * @param {string} name The name of the section\n     */\n    start(name) {\n        this.push(0, \"SECTION\");\n        this.push(2, name);\n    }\n\n    end() {\n        this.push(0, \"ENDSEC\");\n    }\n\n    addHeaderVariable(name, tagsElements) {\n        this.push(9, `$${name}`);\n        tagsElements.forEach((tagElement) => {\n            this.push(tagElement[0], tagElement[1]);\n        });\n    }\n\n    push(code, value) {\n        this.lines.push(code, value);\n    }\n\n    toDxfString() {\n        return this.lines.join(\"\\n\");\n    }\n}\n\nmodule.exports = TagsManager;\n", "const LineType = require(\"./LineType\");\nconst Layer = require(\"./Layer\");\nconst Table = require(\"./Table\");\nconst DimStyleTable = require(\"./DimStyleTable\");\nconst TextStyle = require(\"./TextStyle\");\nconst Viewport = require(\"./Viewport\");\nconst AppId = require(\"./AppId\");\nconst Block = require(\"./Block\");\nconst BlockRecord = require(\"./BlockRecord\");\nconst Dictionary = require(\"./Dictionary\");\nconst Line = require(\"./Line\");\nconst Line3d = require(\"./Line3d\");\nconst Arc = require(\"./Arc\");\nconst Circle = require(\"./Circle\");\nconst Cylinder = require(\"./Cylinder\");\nconst Text = require(\"./Text\");\nconst Polyline = require(\"./Polyline\");\nconst Polyline3d = require(\"./Polyline3d\");\nconst Face = require(\"./Face\");\nconst Point = require(\"./Point\");\nconst Spline = require(\"./Spline\");\nconst Ellipse = require(\"./Ellipse\");\nconst TagsManager = require(\"./TagsManager\");\nconst Handle = require(\"./Handle\");\n\nclass Drawing {\n    constructor() {\n        this.layers = {};\n        this.activeLayer = null;\n        this.lineTypes = {};\n        this.headers = {};\n        this.tables = {};\n        this.blocks = {};\n\n        this.dictionary = new Dictionary();\n\n        this.setUnits(\"Unitless\");\n\n        for (const ltype of Drawing.LINE_TYPES) {\n            this.addLineType(ltype.name, ltype.description, ltype.elements);\n        }\n\n        for (const l of Drawing.LAYERS) {\n            this.addLayer(l.name, l.colorNumber, l.lineTypeName);\n        }\n\n        this.setActiveLayer(\"0\");\n\n        // Must call this function\n        this.generateAutocadExtras();\n    }\n\n    /**\n     * @param {string} name\n     * @param {string} description\n     * @param {array} elements - if elem > 0 it is a line, if elem < 0 it is gap, if elem == 0.0 it is a\n     */\n    addLineType(name, description, elements) {\n        this.lineTypes[name] = new LineType(name, description, elements);\n        return this;\n    }\n\n    addLayer(name, colorNumber, lineTypeName) {\n        this.layers[name] = new Layer(name, colorNumber, lineTypeName);\n        return this;\n    }\n\n    setActiveLayer(name) {\n        this.activeLayer = this.layers[name];\n        return this;\n    }\n\n    addTable(name) {\n        const table = new Table(name);\n        this.tables[name] = table;\n        return table;\n    }\n\n    /**\n     *\n     * @param {string} name The name of the block.\n     * @returns {Block}\n     */\n    addBlock(name) {\n        const block = new Block(name);\n        this.blocks[name] = block;\n        return block;\n    }\n\n    drawLine(x1, y1, x2, y2) {\n        this.activeLayer.addShape(new Line(x1, y1, x2, y2));\n        return this;\n    }\n\n    drawLine3d(x1, y1, z1, x2, y2, z2) {\n        this.activeLayer.addShape(new Line3d(x1, y1, z1, x2, y2, z2));\n        return this;\n    }\n\n    drawPoint(x, y) {\n        this.activeLayer.addShape(new Point(x, y));\n        return this;\n    }\n\n    drawRect(x1, y1, x2, y2, cornerLength, cornerBulge) {\n        const w = x2 - x1;\n        const h = y2 - y1;\n        cornerBulge = cornerBulge || 0;\n        let p = null;\n        if (!cornerLength) {\n            p = new Polyline(\n                [\n                    [x1, y1],\n                    [x1, y1 + h],\n                    [x1 + w, y1 + h],\n                    [x1 + w, y1],\n                ],\n                true\n            );\n        } else {\n            p = new Polyline(\n                [\n                    [x1 + w - cornerLength, y1, cornerBulge], // 1\n                    [x1 + w, y1 + cornerLength], // 2\n                    [x1 + w, y1 + h - cornerLength, cornerBulge], // 3\n                    [x1 + w - cornerLength, y1 + h], // 4\n                    [x1 + cornerLength, y1 + h, cornerBulge], // 5\n                    [x1, y1 + h - cornerLength], // 6\n                    [x1, y1 + cornerLength, cornerBulge], // 7\n                    [x1 + cornerLength, y1], // 8\n                ],\n                true\n            );\n        }\n        this.activeLayer.addShape(p);\n        return this;\n    }\n\n    /**\n     * Draw a regular convex polygon as a polyline entity.\n     *\n     * @see [Regular polygon | Wikipedia](https://en.wikipedia.org/wiki/Regular_polygon)\n     *\n     * @param {number} x - The X coordinate of the center of the polygon.\n     * @param {number} y - The Y coordinate of the center of the polygon.\n     * @param {number} numberOfSides - The number of sides.\n     * @param {number} radius - The radius.\n     * @param {number} rotation - The  rotation angle (in Degrees) of the polygon. By default 0.\n     * @param {boolean} circumscribed - If `true` is a polygon in which each side is a tangent to a circle.\n     * If `false` is a polygon in which all vertices lie on a circle. By default `false`.\n     *\n     * @returns {Drawing} - The current object of {@link Drawing}.\n     */\n    drawPolygon(\n        x,\n        y,\n        numberOfSides,\n        radius,\n        rotation = 0,\n        circumscribed = false\n    ) {\n        const angle = (2 * Math.PI) / numberOfSides;\n        const vertices = [];\n        let d = radius;\n        const rotationRad = (rotation * Math.PI) / 180;\n        if (circumscribed) d = radius / Math.cos(Math.PI / numberOfSides);\n        for (let i = 0; i < numberOfSides; i++) {\n            vertices.push([\n                x + d * Math.sin(rotationRad + i * angle),\n                y + d * Math.cos(rotationRad + i * angle),\n            ]);\n        }\n        this.activeLayer.addShape(new Polyline(vertices, true));\n        return this;\n    }\n\n    /**\n     * @param {number} x1 - Center x\n     * @param {number} y1 - Center y\n     * @param {number} r - radius\n     * @param {number} startAngle - degree\n     * @param {number} endAngle - degree\n     */\n    drawArc(x1, y1, r, startAngle, endAngle) {\n        this.activeLayer.addShape(new Arc(x1, y1, r, startAngle, endAngle));\n        return this;\n    }\n\n    /**\n     * @param {number} x1 - Center x\n     * @param {number} y1 - Center y\n     * @param {number} r - radius\n     */\n    drawCircle(x1, y1, r) {\n        this.activeLayer.addShape(new Circle(x1, y1, r));\n        return this;\n    }\n\n    /**\n     * @param {number} x1 - Center x\n     * @param {number} y1 - Center y\n     * @param {number} z1 - Center z\n     * @param {number} r - radius\n     * @param {number} thickness - thickness\n     * @param {number} extrusionDirectionX - Extrusion Direction x\n     * @param {number} extrusionDirectionY - Extrusion Direction y\n     * @param {number} extrusionDirectionZ - Extrusion Direction z\n     */\n    drawCylinder(\n        x1,\n        y1,\n        z1,\n        r,\n        thickness,\n        extrusionDirectionX,\n        extrusionDirectionY,\n        extrusionDirectionZ\n    ) {\n        this.activeLayer.addShape(\n            new Cylinder(\n                x1,\n                y1,\n                z1,\n                r,\n                thickness,\n                extrusionDirectionX,\n                extrusionDirectionY,\n                extrusionDirectionZ\n            )\n        );\n        return this;\n    }\n\n    /**\n     * @param {number} x1 - x\n     * @param {number} y1 - y\n     * @param {number} height - Text height\n     * @param {number} rotation - Text rotation\n     * @param {string} value - the string itself\n     * @param {string} [horizontalAlignment=\"left\"] left | center | right\n     * @param {string} [verticalAlignment=\"baseline\"] baseline | bottom | middle | top\n     */\n    drawText(\n        x1,\n        y1,\n        height,\n        rotation,\n        value,\n        horizontalAlignment = \"left\",\n        verticalAlignment = \"baseline\"\n    ) {\n        this.activeLayer.addShape(\n            new Text(\n                x1,\n                y1,\n                height,\n                rotation,\n                value,\n                horizontalAlignment,\n                verticalAlignment\n            )\n        );\n        return this;\n    }\n\n    /**\n     * @param {[number, number][]} points - Array of points like [ [x1, y1], [x2, y2]... ]\n     * @param {boolean} closed - Closed polyline flag\n     * @param {number} startWidth - Default start width\n     * @param {number} endWidth - Default end width\n     */\n    drawPolyline(points, closed = false, startWidth = 0, endWidth = 0) {\n        this.activeLayer.addShape(\n            new Polyline(points, closed, startWidth, endWidth)\n        );\n        return this;\n    }\n\n    /**\n     * @param {[number, number, number][]} points - Array of points like [ [x1, y1, z1], [x2, y2, z1]... ]\n     */\n    drawPolyline3d(points) {\n        points.forEach((point) => {\n            if (point.length !== 3) {\n                throw \"Require 3D coordinates\";\n            }\n        });\n        this.activeLayer.addShape(new Polyline3d(points));\n        return this;\n    }\n\n    /**\n     *\n     * @param {number} trueColor - Integer representing the true color, can be passed as an hexadecimal value of the form 0xRRGGBB\n     */\n    setTrueColor(trueColor) {\n        this.activeLayer.setTrueColor(trueColor);\n        return this;\n    }\n\n    /**\n     * Draw a spline.\n     * @param {[Array]} controlPoints - Array of control points like [ [x1, y1], [x2, y2]... ]\n     * @param {number} degree - Degree of spline: 2 for quadratic, 3 for cubic. Default is 3\n     * @param {[number]} knots - Knot vector array. If null, will use a uniform knot vector. Default is null\n     * @param {[number]} weights - Control point weights. If provided, must be one weight for each control point. Default is null\n     * @param {[Array]} fitPoints - Array of fit points like [ [x1, y1], [x2, y2]... ]\n     */\n    drawSpline(\n        controlPoints,\n        degree = 3,\n        knots = null,\n        weights = null,\n        fitPoints = []\n    ) {\n        this.activeLayer.addShape(\n            new Spline(controlPoints, degree, knots, weights, fitPoints)\n        );\n        return this;\n    }\n\n    /**\n     * Draw an ellipse.\n     * @param {number} x1 - Center x\n     * @param {number} y1 - Center y\n     * @param {number} majorAxisX - Endpoint x of major axis, relative to center\n     * @param {number} majorAxisY - Endpoint y of major axis, relative to center\n     * @param {number} axisRatio - Ratio of minor axis to major axis\n     * @param {number} startAngle - Start angle\n     * @param {number} endAngle - End angle\n     */\n    drawEllipse(\n        x1,\n        y1,\n        majorAxisX,\n        majorAxisY,\n        axisRatio,\n        startAngle = 0,\n        endAngle = 2 * Math.PI\n    ) {\n        this.activeLayer.addShape(\n            new Ellipse(\n                x1,\n                y1,\n                majorAxisX,\n                majorAxisY,\n                axisRatio,\n                startAngle,\n                endAngle\n            )\n        );\n        return this;\n    }\n\n    /**\n     * @param {number} x1 - x\n     * @param {number} y1 - y\n     * @param {number} z1 - z\n     * @param {number} x2 - x\n     * @param {number} y2 - y\n     * @param {number} z2 - z\n     * @param {number} x3 - x\n     * @param {number} y3 - y\n     * @param {number} z3 - z\n     * @param {number} x4 - x\n     * @param {number} y4 - y\n     * @param {number} z4 - z\n     */\n    drawFace(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {\n        this.activeLayer.addShape(\n            new Face(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4)\n        );\n        return this;\n    }\n\n    _ltypeTable() {\n        const t = new Table(\"LTYPE\");\n        const ltypes = Object.values(this.lineTypes);\n        for (const lt of ltypes) t.add(lt);\n        return t;\n    }\n\n    _layerTable(manager) {\n        const t = new Table(\"LAYER\");\n        const layers = Object.values(this.layers);\n        for (const l of layers) t.add(l);\n        return t;\n    }\n\n    /**\n     * @see https://www.autodesk.com/techpubs/autocad/acadr14/dxf/header_section_al_u05_c.htm\n     * @see https://www.autodesk.com/techpubs/autocad/acad2000/dxf/header_section_group_codes_dxf_02.htm\n     *\n     * @param {string} variable\n     * @param {array} values Array of \"two elements arrays\". [  [value1_GroupCode, value1_value], [value2_GroupCode, value2_value]  ]\n     */\n    header(variable, values) {\n        this.headers[variable] = values;\n        return this;\n    }\n\n    /**\n     *\n     * @param {string} unit see Drawing.UNITS\n     */\n    setUnits(unit) {\n        let value =\n            typeof Drawing.UNITS[unit] != \"undefined\"\n                ? Drawing.UNITS[unit]\n                : Drawing.UNITS[\"Unitless\"];\n        this.header(\"INSUNITS\", [[70, Drawing.UNITS[unit]]]);\n        return this;\n    }\n\n    /** Generate additional DXF metadata which are required to successfully open resulted document\n     * in AutoDesk products. Call this method before serializing the drawing to get the most\n     * compatible result.\n     */\n    generateAutocadExtras() {\n        if (!this.headers[\"ACADVER\"]) {\n            /* AutoCAD 2007 version. */\n            this.header(\"ACADVER\", [[1, \"AC1021\"]]);\n        }\n\n        if (!this.lineTypes[\"ByBlock\"]) {\n            this.addLineType(\"ByBlock\", \"\", []);\n        }\n        if (!this.lineTypes[\"ByLayer\"]) {\n            this.addLineType(\"ByLayer\", \"\", []);\n        }\n\n        let vpTable = this.tables[\"VPORT\"];\n        if (!vpTable) {\n            vpTable = this.addTable(\"VPORT\");\n        }\n        let styleTable = this.tables[\"STYLE\"];\n        if (!styleTable) {\n            styleTable = this.addTable(\"STYLE\");\n        }\n        if (!this.tables[\"VIEW\"]) {\n            this.addTable(\"VIEW\");\n        }\n        if (!this.tables[\"UCS\"]) {\n            this.addTable(\"UCS\");\n        }\n        let appIdTable = this.tables[\"APPID\"];\n        if (!appIdTable) {\n            appIdTable = this.addTable(\"APPID\");\n        }\n        if (!this.tables[\"DIMSTYLE\"]) {\n            const t = new DimStyleTable(\"DIMSTYLE\");\n            this.tables[\"DIMSTYLE\"] = t;\n        }\n\n        vpTable.add(new Viewport(\"*ACTIVE\", 1000));\n\n        /* Non-default text alignment is not applied without this entry. */\n        styleTable.add(new TextStyle(\"standard\"));\n\n        appIdTable.add(new AppId(\"ACAD\"));\n\n        this.modelSpace = this.addBlock(\"*Model_Space\");\n        this.addBlock(\"*Paper_Space\");\n\n        const d = new Dictionary();\n        this.dictionary.addChildDictionary(\"ACAD_GROUP\", d);\n    }\n\n    _tagsManager() {\n        const manager = new TagsManager();\n\n        // Setup\n        const blockRecordTable = new Table(\"BLOCK_RECORD\");\n        const blocks = Object.values(this.blocks);\n        for (const b of blocks) {\n            const r = new BlockRecord(b.name);\n            blockRecordTable.add(r);\n        }\n        const ltypeTable = this._ltypeTable();\n        const layerTable = this._layerTable();\n\n        // Header section start.\n        manager.start(\"HEADER\");\n        manager.addHeaderVariable(\"HANDSEED\", [[5, Handle.peek()]]);\n        const variables = Object.entries(this.headers);\n        for (const v of variables) {\n            const [name, values] = v;\n            manager.addHeaderVariable(name, values);\n        }\n        manager.end();\n        // Header section end.\n\n        // Classes section start.\n        manager.start(\"CLASSES\");\n        // Empty CLASSES section for compatibility\n        manager.end();\n        // Classes section end.\n\n        // Tables section start.\n        manager.start(\"TABLES\");\n        ltypeTable.tags(manager);\n        layerTable.tags(manager);\n        const tables = Object.values(this.tables);\n        for (const t of tables) {\n            t.tags(manager);\n        }\n        blockRecordTable.tags(manager);\n        manager.end();\n        // Tables section end.\n\n        // Blocks section start.\n        manager.start(\"BLOCKS\");\n        for (const b of blocks) {\n            b.tags(manager);\n        }\n        manager.end();\n        // Blocks section end.\n\n        // Entities section start.\n        manager.start(\"ENTITIES\");\n        const layers = Object.values(this.layers);\n        for (const l of layers) {\n            l.shapesTags(this.modelSpace, manager);\n        }\n        manager.end();\n        // Entities section end.\n\n        // Objects section start.\n        manager.start(\"OBJECTS\");\n        this.dictionary.tags(manager);\n        manager.end();\n        // Objects section end.\n\n        manager.push(0, \"EOF\");\n\n        return manager;\n    }\n\n    toDxfString() {\n        return this._tagsManager().toDxfString();\n    }\n}\n\n//AutoCAD Color Index (ACI)\n//http://sub-atomic.com/~moses/acadcolors.html\nDrawing.ACI = {\n    LAYER: 0,\n    RED: 1,\n    YELLOW: 2,\n    GREEN: 3,\n    CYAN: 4,\n    BLUE: 5,\n    MAGENTA: 6,\n    WHITE: 7,\n};\n\nDrawing.LINE_TYPES = [\n    { name: \"CONTINUOUS\", description: \"______\", elements: [] },\n    { name: \"DASHED\", description: \"_ _ _ \", elements: [5.0, -5.0] },\n    { name: \"DOTTED\", description: \". . . \", elements: [0.0, -5.0] },\n];\n\nDrawing.LAYERS = [\n    { name: \"0\", colorNumber: Drawing.ACI.WHITE, lineTypeName: \"CONTINUOUS\" },\n];\n\n//https://www.autodesk.com/techpubs/autocad/acad2000/dxf/header_section_group_codes_dxf_02.htm\nDrawing.UNITS = {\n    Unitless: 0,\n    Inches: 1,\n    Feet: 2,\n    Miles: 3,\n    Millimeters: 4,\n    Centimeters: 5,\n    Meters: 6,\n    Kilometers: 7,\n    Microinches: 8,\n    Mils: 9,\n    Yards: 10,\n    Angstroms: 11,\n    Nanometers: 12,\n    Microns: 13,\n    Decimeters: 14,\n    Decameters: 15,\n    Hectometers: 16,\n    Gigameters: 17,\n    \"Astronomical units\": 18,\n    \"Light years\": 19,\n    Parsecs: 20,\n};\n\nmodule.exports = Drawing;\n", "module.exports = require('./src/Drawing');"],
  "mappings": "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",
  "names": []
}
